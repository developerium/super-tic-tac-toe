{"version":3,"sources":["game/tile/tile.ts","game/win-detector/win-detector.ts","game/game.ts","game/player-manager/player-manager.ts","component/game-context/GameContext.tsx","component/layout/PageLayout.tsx","component/home/HomePage.tsx","component/game/PlayerPiece.tsx","component/game/HiddenDiv.tsx","component/game/TileFC.tsx","component/game/TileRowFC.tsx","component/game/PlayerAvatar.tsx","component/game/PlayerPieceHolder.tsx","component/game/WinnerDialog.tsx","component/game/GamePage.tsx","component/game/useGamePage.ts","component/about-me/AboutMePage.tsx","component/not-found/NotFoundPage.tsx","component/game-setting/GameSettingPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Pin","WinDetector","size","winningMoves","this","result","i","horizontal","vertical","j","push","x","y","diameter1","diameter2","getWinningMoves","tiles","locationSet","player","tilePlayer","locations","Game","players","playerIndex","history","winDetector","Array","from","fill","generateBySize","length","pin","nextPlayer","goToNextPlayer","oldPin","getWinner","playerClasses","PlayerManager","ids","pieceCount","forEach","id","index","name","cssClass","pieces","Small","Medium","Large","getInitialParams","Object","values","playerId","initialSetting","playerCount","gameSize","initialState","setting","game","playerManager","GameContext","createContext","GameContextProvider","children","useState","setSetting","setPlayerManager","setGame","changeSetting","useCallback","value","newGame","newPlayers","Math","random","Provider","Root","styled","div","isGameLayout","Content","PageLayout","title","className","HomePage","to","BasePiece","SmallPiece","MediumPiece","LargePiece","PlayerPiece","HiddenDiv","FadedText","Box","isWinner","isDraggingOver","getPinSymbol","TileFC","tile","useContext","getPlayer","droppableId","provided","snapshot","ref","innerRef","droppableProps","placeholder","Row","isWinnerLocation","winnerLocation","TileRowFC","row","winnerLocations","map","some","Container","selected","Icon","span","PlayerAvatar","h3","h4","h6","DraggablePiece","draggableId","draggableIndex","draggableProps","dragHandleProps","PlayerPieceHolder","StyledDialog","dialog","WinnerDialog","winner","open","method","onClick","TileContent","VerticalContent","GamePage","refreshCounter","setRefreshCounter","getPlayers","gameWinner","useEffect","onDragEnd","console","log","source","destination","split","xRaw","yRaw","parseInt","isNaN","validate","removePin","createMove","useGamePage","isDropDisabled","getTiles","tileRow","AboutMePage","NotFoundPage","SelectWrapper","GameSettingPage","onChange","event","target","htmlFor","required","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a8e784e.chunk.js","sourcesContent":["export enum Pin {\n  Small,\n  Medium,\n  Large,\n}\n\nexport interface Tile {\n  player: string;\n  pin: Pin;\n}\n\nexport type TileRow = (Tile | null)[];\n\nexport interface Location {\n  x: number;\n  y: number;\n}\n\nexport type LocationSet = Location[];\n\nexport const generateBySize = (size: number): TileRow[] => {\n  return Array.from(new Array(size), () => new Array(size).fill(null));\n};\n\nexport const getWinningMoves = (size: number): LocationSet[] => {\n  const result: LocationSet[] = [];\n\n  for (let i = 0; i < size; i++) {\n    const horizontal: Location[] = [];\n    const vertical: Location[] = [];\n\n    for (let j = 0; j < size; j++) {\n      horizontal.push({ x: i, y: j });\n      vertical.push({ x: j, y: i });\n    }\n\n    result.push(horizontal);\n    result.push(vertical);\n  }\n\n  const diameter1: Location[] = [];\n  const diameter2: Location[] = [];\n  for (let i = 0; i < size; i++) {\n    diameter1.push({ x: i, y: i });\n    diameter2.push({ x: i, y: size - 1 - i });\n  }\n\n  result.push(diameter1);\n  result.push(diameter2);\n\n  return result;\n};\n","import { Location, TileRow, getWinningMoves, LocationSet } from '../tile/tile';\n\ninterface WinDetectorConstructorInput {\n  size: number;\n}\n\nexport interface WinnerResult {\n  player: string;\n  locations: Location[];\n}\n\nexport class WinDetector {\n  private readonly winningMoves: LocationSet[];\n\n  constructor({ size }: WinDetectorConstructorInput) {\n    this.winningMoves = getWinningMoves(size);\n  }\n\n  getWinner(tiles: TileRow[]): WinnerResult | null {\n    for (const locationSet of this.winningMoves) {\n      let player = null;\n\n      for (const { x, y } of locationSet) {\n        const tilePlayer = tiles[x][y]?.player;\n        if (!tilePlayer) {\n          player = null;\n          break; // this set is missing a player\n        }\n\n        if (!player) {\n          player = tilePlayer;\n          continue;\n        }\n\n        if (player !== tilePlayer) {\n          player = null;\n          break; // different players\n        }\n      }\n\n      if (player) {\n        return {\n          player,\n          locations: locationSet,\n        };\n      }\n    }\n\n    return null;\n  }\n}\n","import { generateBySize, Pin, TileRow, Location } from './tile/tile';\nimport { WinDetector, WinnerResult } from './win-detector/win-detector';\n\ninterface GameConstructor {\n  size: number;\n  players: string[];\n  tiles?: TileRow[];\n}\n\ninterface MoveInput extends Location {\n  pin: Pin;\n}\n\ninterface History extends Location, MoveInput {\n  player: string;\n}\n\nexport class Game {\n  private readonly players: string[];\n  private playerIndex = 0;\n  private tiles: TileRow[];\n  private history: History[] = [];\n  private winDetector: WinDetector;\n\n  get playerCount(): number {\n    return this.players.length;\n  }\n\n  get nextPlayer(): string {\n    return this.players[this.playerIndex];\n  }\n\n  constructor({ size, players, tiles }: GameConstructor) {\n    this.players = players;\n    this.tiles = tiles || generateBySize(size);\n    this.winDetector = new WinDetector({ size });\n  }\n\n  getTiles(): TileRow[] {\n    return this.tiles;\n  }\n\n  createMove({ x, y, pin }: MoveInput): void {\n    const player = this.nextPlayer;\n\n    this.tiles[x][y] = { player, pin };\n    this.history.push({ x, y, pin, player });\n\n    this.goToNextPlayer();\n  }\n\n  goToNextPlayer(): void {\n    this.playerIndex++;\n\n    if (typeof this.players[this.playerIndex] === 'undefined') {\n      this.playerIndex = 0;\n    }\n  }\n\n  validate({ x, y, pin }: MoveInput): boolean {\n    const oldPin = this.tiles[x][y]?.pin;\n    // if it's not occupied\n    if (typeof oldPin === 'undefined') {\n      return true;\n    }\n\n    return oldPin < pin;\n  }\n\n  getWinner(): WinnerResult | null {\n    return this.winDetector.getWinner(this.tiles);\n  }\n}\n","import { Pin } from '../tile/tile';\n\ninterface PlayerManagerConstructor {\n  ids: string[];\n  pieceCount?: number;\n}\n\nexport interface Player {\n  id: string;\n  name: string;\n  cssClass: string;\n  pieces: {\n    [Pin.Small]: number;\n    [Pin.Medium]: number;\n    [Pin.Large]: number;\n  };\n}\n\nconst playerClasses = [\n  'is-primary',\n  'is-warning',\n  'is-success',\n  'is-error',\n  'is-disabled',\n];\n\nconst getInitialParams = ({\n  id,\n  index,\n  pieceCount,\n}: {\n  id: string;\n  index: number;\n  pieceCount: number;\n}): Player => ({\n  id,\n  name: `P${index + 1}`,\n  cssClass: playerClasses[index],\n  pieces: {\n    [Pin.Small]: pieceCount,\n    [Pin.Medium]: pieceCount,\n    [Pin.Large]: pieceCount,\n  },\n});\n\nexport class PlayerManager {\n  private players: { [id: string]: Player } = {};\n\n  constructor({ ids, pieceCount = 3 }: PlayerManagerConstructor) {\n    ids.forEach((id, index) => {\n      this.players[id] = getInitialParams({\n        id,\n        index,\n        pieceCount,\n      });\n    });\n  }\n\n  getPlayers(): Player[] {\n    return Object.values(this.players);\n  }\n\n  removePin({ pin, player }: { pin: Pin; player: string }): boolean {\n    if (!this.players[player].pieces[pin]) {\n      return false;\n    }\n\n    this.players[player].pieces[pin]--;\n\n    return true;\n  }\n\n  getPlayer(playerId?: string): Player | undefined {\n    if (!playerId) {\n      return undefined;\n    }\n\n    return this.players[playerId];\n  }\n}\n","import React, { createContext, FC, useCallback, useState } from 'react';\nimport { Game } from '../../game/game';\nimport { PlayerManager } from '../../game/player-manager/player-manager';\n\ntype SettingValue = number | string;\ntype ChangeSetting = (name: string, value: SettingValue) => void;\n\ninterface IGameContext {\n  setting: { [key: string]: SettingValue };\n  changeSetting?: ChangeSetting;\n  game: Game | null;\n  playerManager: PlayerManager | null;\n  newGame?: () => void;\n}\n\nconst initialSetting = {\n  playerCount: 2,\n  gameSize: 3,\n};\n\nconst initialState: IGameContext = {\n  setting: {\n    ...initialSetting,\n  },\n  game: null,\n  playerManager: null,\n};\n\nexport const GameContext = createContext(initialState);\n\nexport const GameContextProvider: FC = ({ children }) => {\n  const [setting, setSetting] = useState(initialSetting);\n  const [playerManager, setPlayerManager] = useState<PlayerManager | null>(\n    null\n  );\n  const [game, setGame] = useState<Game | null>(null);\n\n  const changeSetting = useCallback<ChangeSetting>(\n    (name, value) => {\n      setSetting({\n        ...setting,\n        [name]: value,\n      });\n    },\n    [setting, setSetting]\n  );\n\n  const newGame = useCallback(() => {\n    const newPlayers = Array.from(\n      new Array(setting.playerCount),\n      () => `${Math.random()}`\n    );\n\n    setPlayerManager(\n      new PlayerManager({\n        ids: newPlayers,\n        pieceCount: setting.gameSize,\n      })\n    );\n\n    setGame(\n      new Game({\n        size: setting.gameSize,\n        players: newPlayers,\n      })\n    );\n  }, [setting, setGame]);\n\n  return (\n    <GameContext.Provider\n      value={{ setting, changeSetting, game, newGame, playerManager }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n};\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\n\ninterface PageProps {\n  title?: string;\n  isGameLayout?: boolean;\n}\n\ninterface RootProps {\n  isGameLayout?: boolean;\n}\n\nconst Root = styled.div<RootProps>`\n  padding: 8px;\n  max-width: 900px;\n  margin: auto;\n\n  ${({ isGameLayout }) =>\n    !isGameLayout &&\n    `\n     height: 98%;\n  `}\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nexport const PageLayout: FC<PageProps> = ({ title, isGameLayout, children }) => (\n  <Root isGameLayout={isGameLayout}>\n    <Content className=\"nes-container with-title is-centered is-rounded\">\n      <p className=\"title\">{title}</p>\n\n      {children}\n    </Content>\n  </Root>\n);\n","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { PageLayout } from '../layout/PageLayout';\n\nconst Content = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n`;\n\nexport const HomePage: FC = () => (\n  <PageLayout title=\"Super Tic Tak Toe\">\n    <Content>\n      <p>Welcome to</p>\n      <p>our awesome game of tic tak toe</p>\n      <p>on steroids!</p>\n    </Content>\n\n    <Link to=\"/game-setting\" className=\"nes-btn is-primary\">\n      Play !\n    </Link>\n  </PageLayout>\n);\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { Pin } from '../../game/tile/tile';\n\nconst BasePiece = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst SmallPiece = styled(BasePiece)`\n  width: 40px;\n  height: 40px;\n`;\n\nconst MediumPiece = styled(BasePiece)`\n  width: 60px;\n  height: 60px;\n`;\n\nconst LargePiece = styled(BasePiece)`\n  width: 80px;\n  height: 80px;\n`;\n\ninterface PlayerPieceProps {\n  pin: Pin;\n  className?: string;\n}\n\nexport const PlayerPiece: FC<PlayerPieceProps> = ({\n  pin,\n  children,\n  className,\n}) => {\n  switch (pin) {\n  case Pin.Small:\n    return (\n      <SmallPiece className={`nes-btn ${className}`}>{children}</SmallPiece>\n    );\n  case Pin.Medium:\n    return (\n      <MediumPiece className={`nes-btn ${className}`}>{children}</MediumPiece>\n    );\n  case Pin.Large:\n    return (\n      <LargePiece className={`nes-btn ${className}`}>{children}</LargePiece>\n    );\n  default:\n    return <div>unknown pin received</div>;\n  }\n};\n","import styled from 'styled-components';\n\nexport const HiddenDiv = styled.div`\n  display: none;\n`;\n","import React, { FC, useContext } from 'react';\nimport styled from 'styled-components';\nimport { Droppable } from 'react-beautiful-dnd';\n\nimport { Pin, Tile } from '../../game/tile/tile';\nimport { GameContext } from '../game-context/GameContext';\nimport { Player } from '../../game/player-manager/player-manager';\nimport { PlayerPiece } from './PlayerPiece';\nimport { HiddenDiv } from './HiddenDiv';\n\ninterface TileProps {\n  tile: Tile | null;\n  x: number;\n  y: number;\n  isWinner?: boolean;\n}\n\ninterface BoxProps {\n  isDraggingOver?: boolean;\n  isWinner?: boolean;\n}\n\nconst FadedText = styled.div`\n  opacity: 0.2;\n  font-size: small;\n`;\n\nconst Box = styled.div<BoxProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 1px dashed gray;\n  width: 120px;\n  height: 120px;\n\n  ${({ isWinner }) =>\n    isWinner &&\n    `\n    background-color: #33eb91;\n    animation: blinker 1s step-start infinite;\n    `}\n  ${({ isDraggingOver }) => isDraggingOver && `background-color: #8561c5;`}\n`;\n\nconst getPinSymbol = (pin: Pin) => {\n  switch (pin) {\n  case Pin.Small:\n    return 'S';\n  case Pin.Medium:\n    return 'M';\n  case Pin.Large:\n    return 'L';\n  default:\n    return 'unknown';\n  }\n};\n\nexport const TileFC: FC<TileProps> = ({ tile, y, x, isWinner = false }) => {\n  const { playerManager } = useContext(GameContext);\n\n  const player: undefined | Player = playerManager?.getPlayer(tile?.player);\n\n  return (\n    <Droppable droppableId={`${x}-${y}`}>\n      {(provided, snapshot) => (\n        <Box\n          ref={provided.innerRef}\n          {...provided.droppableProps}\n          isDraggingOver={snapshot.isDraggingOver}\n          isWinner={isWinner}\n        >\n          {!player && <FadedText>{x+1}-{y+1}</FadedText>}\n\n          {player && typeof tile?.pin !== 'undefined' && (\n            <PlayerPiece pin={tile.pin} className={player.cssClass}>\n              {getPinSymbol(tile.pin)}\n            </PlayerPiece>\n          )}\n\n          <HiddenDiv>{provided.placeholder}</HiddenDiv>\n        </Box>\n      )}\n    </Droppable>\n  );\n};\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\n\nimport { Location, TileRow } from '../../game/tile/tile';\nimport { TileFC } from './TileFC';\n\ninterface TileRowProps {\n  row: TileRow;\n  x: number;\n  winnerLocations?: Location[];\n}\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst isWinnerLocation =\n  ({ x, y }: Location) =>\n    (winnerLocation: Location) =>\n      x === winnerLocation.x && y === winnerLocation.y;\n\nexport const TileRowFC: FC<TileRowProps> = ({ row, x, winnerLocations }) => (\n  <Row>\n    {row.map((tile, y) => (\n      <TileFC\n        tile={tile}\n        y={y}\n        x={x}\n        key={`${x}-${y}`}\n        isWinner={\n          winnerLocations &&\n          winnerLocations.some(\n            isWinnerLocation({\n              x,\n              y,\n            })\n          )\n        }\n      />\n    ))}\n  </Row>\n);\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\n\ninterface PlayerAvatarProps {\n  selected?: boolean;\n  name: string;\n  className: string;\n}\n\ninterface ContainerProps {\n  selected: boolean;\n}\n\nconst Container = styled.div<ContainerProps>`\n  border-radius: 10%;\n  ${({ selected }) =>\n    selected &&\n    `\n    animation: blinker 1s step-start infinite;\n  `}\n`;\n\nconst Icon = styled.span``;\n\nexport const PlayerAvatar: FC<PlayerAvatarProps> = ({\n  selected = false,\n  className,\n  name\n}) => (\n  <Container selected={selected}>\n    <Icon className={`nes-text ${className}`}>{name}</Icon>\n  </Container>\n);\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport { Player } from '../../game/player-manager/player-manager';\nimport { Pin } from '../../game/tile/tile';\nimport { PlayerPiece } from './PlayerPiece';\n\ninterface PlayerPieceProps {\n  player: Player;\n}\n\ninterface PieceProps {\n  draggableId: string;\n  draggableIndex: Pin;\n}\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  align-items: center;\n  width: 100%;\n  height: 80px;\n`;\n\nconst Large = styled.h3``;\nconst Medium = styled.h4``;\nconst Small = styled.h6``;\n\nconst DraggablePiece: FC<PieceProps> = ({\n  children,\n  draggableId,\n  draggableIndex,\n}) => (\n  <Draggable draggableId={draggableId} index={draggableIndex}>\n    {(provided) => (\n      <div\n        ref={provided.innerRef}\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n      >\n        {children}\n      </div>\n    )}\n  </Draggable>\n);\n\nexport const PlayerPieceHolder: FC<PlayerPieceProps> = ({ player }) => (\n  <Root>\n    {player.pieces[Pin.Large] > 0 && (\n      <DraggablePiece draggableId=\"draggable-1\" draggableIndex={Pin.Large}>\n        <PlayerPiece pin={Pin.Large} className={player.cssClass}>\n          <Large>Lx{player.pieces[Pin.Large]}</Large>\n        </PlayerPiece>\n      </DraggablePiece>\n    )}\n\n    {player.pieces[Pin.Medium] > 0 && (\n      <DraggablePiece draggableId=\"draggable-2\" draggableIndex={Pin.Medium}>\n        <PlayerPiece pin={Pin.Medium} className={player.cssClass}>\n          <Medium>Mx{player.pieces[Pin.Medium]}</Medium>\n        </PlayerPiece>\n      </DraggablePiece>\n    )}\n\n    {player.pieces[Pin.Small] > 0 && (\n      <DraggablePiece draggableId=\"draggable-3\" draggableIndex={Pin.Small}>\n        <PlayerPiece pin={Pin.Small} className={player.cssClass}>\n          <Small>Sx{player.pieces[Pin.Small]}</Small>\n        </PlayerPiece>\n      </DraggablePiece>\n    )}\n  </Root>\n);\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\ninterface WinnerDialogProps {\n  winner: string;\n  newGame?: () => void;\n}\n\nconst StyledDialog = styled.dialog`\n  position: absolute;\n  width: 70%;\n  top: 20%;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  background-color: #fff;\n`;\n\nexport const WinnerDialog: FC<WinnerDialogProps> = ({ winner, newGame }) => (\n  <StyledDialog className=\"nes-dialog is-rounded\" open>\n    <form method=\"dialog\">\n      <p className=\"title\">Game over</p>\n      <p>{winner} is the winner!!</p>\n      <p>Good job :)</p>\n      <menu className=\"dialog-menu\">\n        <Link to=\"/game-setting\" className=\"nes-btn\">\n          Change settings\n        </Link>\n        &nbsp;\n        <button className=\"nes-btn is-primary\" onClick={newGame}>\n          Play again\n        </button>\n      </menu>\n    </form>\n  </StyledDialog>\n);\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { Link } from 'react-router-dom';\n\nimport { PageLayout } from '../layout/PageLayout';\nimport { TileRowFC } from './TileRowFC';\nimport { PlayerAvatar } from './PlayerAvatar';\nimport { PlayerPieceHolder } from './PlayerPieceHolder';\nimport { HiddenDiv } from './HiddenDiv';\nimport { useGamePage } from './useGamePage';\nimport { WinnerDialog } from './WinnerDialog';\n\nconst Content = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n`;\n\nconst TileContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst VerticalContent = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  align-items: center;\n  padding: 16px 0;\n`;\n\nexport const GamePage: FC = () => {\n  const {\n    game,\n    playerManager,\n    nextPlayer,\n    players,\n    onDragEnd,\n    gameWinner,\n    newGame,\n  } = useGamePage();\n\n  if (!game || !playerManager || !nextPlayer) {\n    return (\n      <PageLayout title=\"Loading ...\">\n        <div>\n          <div className=\"nes-octocat animate\" />\n          Hi :)\n        </div>\n      </PageLayout>\n    );\n  }\n\n  return (\n    <PageLayout title=\"Tic Tac Toe\" isGameLayout>\n      <Content>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <VerticalContent>\n            {players.map((player) => (\n              <PlayerAvatar\n                key={player.id}\n                selected={!gameWinner && player.id === nextPlayer}\n                className={player.cssClass}\n                name={player.name}\n              />\n            ))}\n\n            <div>\n              <button className=\"nes-btn\" onClick={newGame}>\n                reset\n              </button>\n              &nbsp;\n              <Link to=\"/game-setting\" className=\"nes-btn\">\n                setting\n              </Link>\n            </div>\n          </VerticalContent>\n\n          <Droppable droppableId=\"playerPieces\" isDropDisabled>\n            {(provided) => (\n              <VerticalContent\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n              >\n                {players.map((player) =>\n                  player.id === nextPlayer ? (\n                    <PlayerPieceHolder key={player.id} player={player} />\n                  ) : null\n                )}\n                <HiddenDiv>{provided.placeholder}</HiddenDiv>\n              </VerticalContent>\n            )}\n          </Droppable>\n\n          <TileContent>\n            {game.getTiles().map((tileRow, index) => (\n              <TileRowFC\n                row={tileRow}\n                x={index}\n                key={index}\n                winnerLocations={gameWinner?.locations}\n              />\n            ))}\n          </TileContent>\n        </DragDropContext>\n      </Content>\n\n      {!!gameWinner && (\n        <WinnerDialog\n          winner={\n            playerManager.getPlayer(gameWinner.player)?.name ||\n            gameWinner.player\n          }\n          newGame={newGame}\n        />\n      )}\n    </PageLayout>\n  );\n};\n","import { useContext, useEffect, useState } from 'react';\nimport { DropResult, ResponderProvided } from 'react-beautiful-dnd';\n\nimport { GameContext } from '../game-context/GameContext';\nimport { Pin } from '../../game/tile/tile';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useGamePage = () => {\n  const { game, newGame, playerManager } = useContext(GameContext);\n  const [refreshCounter, setRefreshCounter] = useState(0);\n  const nextPlayer = game?.nextPlayer;\n  const players = playerManager?.getPlayers() || [];\n  const gameWinner = game?.getWinner();\n  // const gameWinner = {\n  //   player: players[0]?.id,\n  //   locations: [\n  //     { x: 0, y: 0 },\n  //     { x: 1, y: 1 },\n  //     { x: 2, y: 2 },\n  //   ],\n  // };\n\n  useEffect(() => {\n    // if this page is opened directly\n    if (!game && newGame) {\n      newGame();\n    }\n  }, []);\n\n  const onDragEnd = (result: DropResult, provided: ResponderProvided) => {\n    console.log('onDragEnd', { result, provided });\n\n    if (!game || !playerManager || !nextPlayer) {\n      console.log('game is not ready');\n      return;\n    }\n\n    const pin: Pin = result.source.index;\n    const destination = result.destination?.droppableId;\n\n    if (!destination) {\n      console.log('no destination tile found');\n      return;\n    }\n\n    const [xRaw, yRaw] = destination.split('-');\n    const x = parseInt(xRaw, 10);\n    const y = parseInt(yRaw, 10);\n\n    if (isNaN(x) || isNaN(y) || !game.validate({ x, y, pin })) {\n      console.log('invalid move');\n      return;\n    }\n\n    if (!playerManager.removePin({ pin, player: nextPlayer })) {\n      console.log('unable to remove pin');\n      return;\n    }\n\n    game.createMove({ x, y, pin });\n\n    setRefreshCounter(refreshCounter + 1);\n  };\n\n  return {\n    game,\n    playerManager,\n    nextPlayer,\n    players,\n    onDragEnd,\n    gameWinner,\n    newGame,\n  };\n};\n","import React, { FC } from 'react';\n\nexport const AboutMePage: FC = () => <h1>AboutMePage</h1>;\n","import React, { FC } from 'react';\n\nexport const NotFoundPage: FC = () => <h1>NotFoundPage</h1>;\n","import React, { ChangeEventHandler, FC, useContext } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { PageLayout } from '../layout/PageLayout';\nimport { GameContext } from '../game-context/GameContext';\n\nconst Content = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n`;\n\nconst SelectWrapper = styled.div`\n  margin-bottom: 16px;\n`;\n\nexport const GameSettingPage: FC = () => {\n  const { setting, changeSetting, newGame } = useContext(GameContext);\n\n  const onChange: ChangeEventHandler<HTMLSelectElement> = (event) => {\n    const { name, value } = event.target;\n    changeSetting?.(name, parseInt(value, 10));\n  };\n\n  return (\n    <PageLayout title=\"Game setting\">\n      <Content>\n        <p>Quickly set game settings</p>\n\n        <label htmlFor=\"playerCount\">Player count:</label>\n        <SelectWrapper className=\"nes-select\">\n          <select\n            required\n            id=\"playerCount\"\n            name=\"playerCount\"\n            onChange={onChange}\n            value={setting.playerCount}\n          >\n            <option value={2}>2 Players</option>\n            <option value={3}>3 Players</option>\n            <option value={4}>4 Players</option>\n          </select>\n        </SelectWrapper>\n\n        <label htmlFor=\"gameSize\">Game size:</label>\n        <SelectWrapper className=\"nes-select\">\n          <select\n            required\n            id=\"gameSize\"\n            name=\"gameSize\"\n            onChange={onChange}\n            value={setting.gameSize}\n          >\n            <option value={3}>3x3</option>\n            <option value={5}>5x5</option>\n            <option value={7}>7x7</option>\n          </select>\n        </SelectWrapper>\n      </Content>\n\n      <Link to=\"/game\" className=\"nes-btn is-primary\" onClick={newGame}>\n        Play !\n      </Link>\n    </PageLayout>\n  );\n};\n","import React, { FC } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport 'nes.css/css/nes.min.css';\n\nimport { GameContextProvider } from './component/game-context/GameContext';\nimport { HomePage } from './component/home/HomePage';\nimport { GamePage } from './component/game/GamePage';\nimport { AboutMePage } from './component/about-me/AboutMePage';\nimport { NotFoundPage } from './component/not-found/NotFoundPage';\nimport { GameSettingPage } from './component/game-setting/GameSettingPage';\n\nconst App: FC = () => {\n  return (\n    <GameContextProvider>\n      <Router>\n        <Switch>\n          <Route path=\"/about-me\">\n            <AboutMePage />\n          </Route>\n          <Route path=\"/game\">\n            <GamePage />\n          </Route>\n          <Route path=\"/game-setting\">\n            <GameSettingPage />\n          </Route>\n          <Route path=\"/\" exact>\n            <HomePage />\n          </Route>\n          <Route path=\"*\">\n            <NotFoundPage />\n          </Route>\n        </Switch>\n      </Router>\n    </GameContextProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}